import { NextRequest, NextResponse } from 'next/server';

export const runtime = 'nodejs';

export async function POST(request: NextRequest) {
  const timestamp = new Date().toISOString();
  console.log('üîß API Print route called at:', timestamp);
  console.log('üåç Environment:', process.env.NODE_ENV);
  console.log('üèóÔ∏è Platform:', process.platform);
  
  try {
    const { imageData, printId } = await request.json();
    console.log(`üì® Processing print job ID: ${printId || 'unknown'}`);
    
    if (!imageData) {
      return NextResponse.json({ error: 'No image data provided' }, { status: 400 });
    }

    // ‡πÅ‡∏õ‡∏•‡∏á base64 ‡πÄ‡∏õ‡πá‡∏ô buffer
    const base64Data = imageData.replace(/^data:image\/\w+;base64,/, '');
    const imageBuffer = Buffer.from(base64Data, 'base64');
    console.log('üìä Image size:', imageBuffer.length, 'bytes');
    
    // ‡πÉ‡∏ô Vercel production ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ file system ‡πÑ‡∏î‡πâ
    // ‡∏î‡∏±‡∏á‡∏ô‡∏±‡πâ‡∏ô‡∏à‡∏∞‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏´‡πâ frontend ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏°‡∏û‡πå
    if (process.env.NODE_ENV === 'production' || process.env.VERCEL) {
      console.log('‚òÅÔ∏è Running in Vercel production - using browser printing');
      
      return NextResponse.json({ 
        success: true, 
        message: 'Image processed successfully - use browser printing',
        fileName: `print_${Date.now()}.png`,
        platform: 'vercel',
        suggestion: 'Browser printing will be used automatically',
        imageSize: imageBuffer.length
      });
    }
    
    // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö local development ‡πÉ‡∏ä‡πâ file system
    console.log('üíª Running locally - attempting file system operations');
    
    // Import fs ‡πÅ‡∏•‡∏∞ path ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô (local development)
    const fs = await import('fs');
    const path = await import('path');
    const { execSync } = await import('child_process');
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå temp ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
    const tempDir = path.default.join(process.cwd(), 'temp');
    console.log('üìÅ Temp directory:', tempDir);
    
    try {
      if (!fs.default.existsSync(tempDir)) {
        fs.default.mkdirSync(tempDir, { recursive: true });
        console.log('‚úÖ Temp directory created');
      }
    } catch (dirError) {
      console.error('‚ùå Failed to create temp directory:', dirError);
      return NextResponse.json({ 
        error: 'Failed to create temp directory',
        details: dirError instanceof Error ? dirError.message : 'Unknown error',
        suggestion: 'Check file permissions or use browser printing'
      }, { status: 500 });
    }
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
    const fileName = `print_${Date.now()}.png`;
    const filePath = path.default.join(tempDir, fileName);
    
    try {
      fs.default.writeFileSync(filePath, imageBuffer);
      console.log('‚úÖ Image file saved:', filePath);
    } catch (writeError) {
      console.error('‚ùå Failed to write image file:', writeError);
      return NextResponse.json({ 
        error: 'Failed to save image file',
        details: writeError instanceof Error ? writeError.message : 'Unknown error',
        suggestion: 'Use browser printing instead'
      }, { status: 500 });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏à‡∏£‡∏¥‡∏á
    if (!fs.default.existsSync(filePath)) {
      console.error('‚ùå Image file not found after writing');
      return NextResponse.json({ 
        error: 'Image file not found after writing',
        suggestion: 'Use browser printing instead'
      }, { status: 500 });
    }

    // ‡∏û‡∏¥‡∏°‡∏û‡πå‡πÑ‡∏ü‡∏•‡πå
    let printCommand = '';
    let printResult = '';
    
    try {
      if (process.platform === 'darwin') {
        // macOS - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Å‡πà‡∏≠‡∏ô
        try {
          const printerCheck = execSync('lpstat -p', { encoding: 'utf8', timeout: 5000 });
          console.log('üñ®Ô∏è Available printers:', printerCheck);
        } catch (checkError) {
          console.warn('‚ö†Ô∏è Could not check printers:', checkError);
        }
        
        // ‡πÉ‡∏ä‡πâ lp command ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
        printCommand = `lp -d "EPSON_L3250_Series_2" -o media=A4 -o ColorModel=Color -o quality=5 -o MediaType=plain -n 1 "${filePath}"`;
        console.log('üñ®Ô∏è Executing print command:', printCommand);
        
        printResult = execSync(printCommand, { 
          encoding: 'utf8',
          timeout: 15000 
        });
        console.log('‚úÖ Print command result:', printResult);
        console.log('‚úÖ Print job sent to: EPSON_L3250_Series_2');
        
      } else if (process.platform === 'win32') {
        // Windows - ‡πÉ‡∏ä‡πâ PowerShell
        printCommand = `powershell.exe -Command "Start-Process -FilePath '${filePath}' -Verb Print"`;
        console.log('üñ®Ô∏è Executing Windows print command:', printCommand);
        execSync(printCommand, { timeout: 10000 });
        console.log('‚úÖ Windows print command executed');
        
      } else {
        // Linux - ‡πÉ‡∏ä‡πâ lp
        printCommand = `lp "${filePath}"`;
        console.log('üñ®Ô∏è Executing Linux print command:', printCommand);
        execSync(printCommand, { timeout: 10000 });
        console.log('‚úÖ Linux print command executed');
      }
      
      // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏´‡∏•‡∏±‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏™‡∏£‡πá‡∏à
      setTimeout(() => {
        try {
          if (fs.default.existsSync(filePath)) {
            fs.default.unlinkSync(filePath);
            console.log('üóëÔ∏è Temp file cleaned up:', fileName);
          }
        } catch (cleanupError) {
          console.warn('‚ö†Ô∏è Failed to cleanup temp file:', cleanupError);
        }
      }, 5000);

      return NextResponse.json({ 
        success: true, 
        message: 'Print job sent successfully',
        fileName,
        platform: process.platform,
        command: printCommand,
        result: printResult
      });
      
    } catch (printError) {
      // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡πâ‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      try {
        if (fs.default.existsSync(filePath)) {
          fs.default.unlinkSync(filePath);
          console.log('üóëÔ∏è Temp file cleaned up after error:', fileName);
        }
      } catch (cleanupError) {
        console.warn('‚ö†Ô∏è Failed to cleanup temp file after error:', cleanupError);
      }
      
      console.error('‚ùå Print error details:', {
        error: printError,
        message: printError instanceof Error ? printError.message : 'Unknown error',
        platform: process.platform,
        command: printCommand,
        filePath,
        fileExists: fs.default.existsSync(filePath),
        fileSize: fs.default.existsSync(filePath) ? fs.default.statSync(filePath).size : 'N/A'
      });
      
      return NextResponse.json({ 
        error: 'Failed to send print job', 
        details: printError instanceof Error ? printError.message : 'Unknown error',
        platform: process.platform,
        command: printCommand,
        suggestion: 'Check if printer is connected and CUPS is running, or use browser printing'
      }, { status: 500 });
    }

  } catch (error) {
    console.error('‚ùå API error:', error);
    return NextResponse.json({ 
      error: 'Internal server error',
      details: error instanceof Error ? error.message : 'Unknown error',
      suggestion: 'Use browser printing as fallback'
    }, { status: 500 });
  }
}